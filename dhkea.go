package dhkea

import (
	rand "crypto/rand"
	"errors"
	"fmt"
	"math/big"
	"runtime"
	"strings"
	"sync"
)

var expTableCache map[int]([]*big.Int) = map[int]([]*big.Int){}
var isCache = false

var primes = map[int]struct {
	Generator int64
	Prime     string
}{
	768: {
		Generator: 2,
		Prime:     "1552518092300708935130918131258481755631334049434514313202351194902966239949102107258669453876591642442910007680288864229150803718918046342632727613031282983744380820890196288509170691316593175367469551763119843371637221007210577919",
	},
	1024: {
		Generator: 2,
		Prime:     "179769313486231590770839156793787453197860296048756011706444423684197180216158519368947833795864925541502180565485980503646440548199239100050792877003355816639229553136239076508735759914822574862575007425302077447712589550957937778424442426617334727629299387668709205606050270810842907692932019128194467627007",
	},
	1536: {
		Generator: 2,
		Prime:     "2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919",
	},
	2048: {
		Generator: 2,
		Prime:     "32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559",
	},
	3072: {
		Generator: 3,
		Prime:     "5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807",
	},
	4096: {
		Generator: 2,
		Prime:     "1044388881413152506679602719846529545831269060992135009022588756444338172022322690710444046669809783930111585737890362691860127079270495454517218673016928427459146001866885779762982229321192368303346235204368051010309155674155697460347176946394076535157284994895284821633700921811716738972451834979455897010306333468590751358365138782250372269117968985194322444535687415522007151638638141456178420621277822674995027990278673458629544391736919766299005511505446177668154446234882665961680796576903199116089347634947187778906528008004756692571666922964122566174582776707332452371001272163776841229318324903125740713574141005124561965913888899753461735347970011693256316751660678950830027510255804846105583465055446615090444309583050775808509297040039680057435342253926566240898195863631588888936364129920059308455669454034010391478238784189888594672336242763795138176353222845524644040094258962433613354036104643881925238489224010194193088911666165584229424668165441688927790460608264864204237717002054744337988941974661214699689706521543006262604535890998125752275942608772174376107314217749233048217904944409836238235772306749874396760463376480215133461333478395682746608242585133953883882226786118030184028136755970045385534758453247",
	},
	6144: {
		Generator: 2,
		Prime:     "33751521821438561184518523159967412330064897805741846548173890474429429901326672445203235101919165483964194359460994881062089387893762814044257438204432573941083014827006090258925875161018096327732335800595831915976014208822304007327848132734933297885803213675261564962603340457220776826322500058091310967253976619973988033663666385188155212656268079501726223369693427999804134467810120772356498596945532366527400517575471969335854905274504119509592366013711954148258884879224599915203456315881034776553083676995718335598586395591169999570824515035017543533352697525287753332500527176569576894926734950469293596134095086603716860086302051544539652689091299099784588919052383463057789440565460681441902442399956419060521629604697347879024654313800186078316526964529288062740879011035175920059192178561473199006205896719435014765345518490882366607110905303449152556221163232127426440691921134648766635695850239231304591744215610985029636895406718880766308249227315984267542266259489684372223916445411015900506239419267909716320331208988978180868987431623710347617992356201449023892203230133009421463914291201346063125219636964261683591541014344239275340735690997732222069758773963390876360546515755280517042160525487302898122311669799679447530453600399342697032714458549591285939453949034981248114322322367238645042515984447890788917823576330019151696568654314153058547592091366014550143819685170068343700104677609041166369760080933413605498962382077778845599834907475953430787446201384567328530675275792962354883770806900827183685718353469574731680520621944540947734619035177180057973022652571032196598229259194875709994709721793154158686515748507274224181316948797104601068212015232921691482496346854413698719750190601102705274481050543239815130686073601076304512284549218459846046082253596762433827419060089029417044871218316020923109988915707117567",
	},
	8192: {
		Generator: 2,
		Prime:     "1090748135619415929450294929359784500348155124953172211774101106966150168922785639028532473848836817769712164169076432969224698752674677662739994265785437233596157045970922338040698100507861033047312331823982435279475700199860971612732540528796554502867919746776983759391475987142521315878719577519148811830879919426939958487087540965716419167467499326156226529675209172277001377591248147563782880558861083327174154014975134893125116015776318890295960698011614157721282527539468816519319333337503114777192360412281721018955834377615480468479252748867320362385355596601795122806756217713579819870634321561907813255153703950795271232652404894983869492174481652303803498881366210508647263668376514131031102336837488999775744046733651827239395353540348414872854639719294694323450186884189822544540647226987292160693184734654941906936646576130260972193280317171696418971553954161446191759093719524951116705577362073481319296041201283516154269044389257727700289684119460283480452306204130024913879981135908026983868205969318167819680850998649694416907952712904962404937775789698917207356355227455066183815847669135530549755439819480321732925869069136146085326382334628745456398071603058051634209386708703306545903199608523824513729625136659128221100967735450519952404248198262813831097374261650380017277916975324134846574681307337017380830353680623216336949471306191686438249305686413380231046096450953594089375540285037292470929395114028305547452584962074309438151825437902976012891749355198678420603722034900311364893046495761404333938686140037848030916292543273684533640032637639100774502371542479302473698388692892420946478947733800387782741417786484770190108867879778991633218628640533982619322466154883011452291890252336487236086654396093853898628805813177559162076363154436494477507871294119841637867701722166609831201845484078070518041336869808398454625586921201308185638888082699408686536045192649569198110353659943111802300636106509865023943661829436426563007917282050894429388841748885398290707743052973605359277515749619730823773215894755121761467887865327707115573804264519206349215850195195364813387526811742474131549802130246506341207020335797706780705406945275438806265978516209706795702579244075380490231741030862614968783306207869687868108423639971983209077624758080499988275591392787267627182442892809646874228263172435642368588260139161962836121481966092745325488641054238839295138992979335446110090325230955276870524611359124918392740353154294858383359",
	},
}

type (
	IndividualKey struct {
		PrivateKey *big.Int
		PublicKey  *big.Int
	}
	ModpGroup struct {
		Generator *big.Int
		Prime     *big.Int
	}
	DiffieHellman struct {
		// Digits:768, 1024, 1536, 2048, 3072, 4096, 6144, 8192
		Digits     int
		PrivateKey *big.Int
		ModpGroup  *ModpGroup
	}
)

func cache() {
	var wg sync.WaitGroup
	ch := make(chan struct{}, 4)
	for k, v := range primes {
		ch <- struct{}{}
		wg.Add(1)

		go func(digit int, v interface{}) {
			mg, err := getModpGroupInfo(digit)
			if err != nil {
				panic(err)
			}
			if expTableCache[digit] == nil {
				xExpTable := expTable(mg.Generator, mg.Prime, digit)
				expTableCache[digit] = xExpTable
			}
			defer wg.Done()
			<-ch
		}(k, v)
	}
	fmt.Println(wg)
	wg.Wait()
}
func (dh *DiffieHellman) GetSharedKey(theirPublicKey *big.Int) *big.Int {

	return dh.quickPowMod(theirPublicKey, dh.PrivateKey, dh.ModpGroup.Prime, false)
}

func (dh *DiffieHellman) New() {
	if dh.Digits == 0 {
		dh.Digits = 2014
	}
	if !isCache {
		isCache = true
		go cache()
	}
	mg, err := getModpGroupInfo(dh.Digits)
	if err != nil {
		panic(err)
	}
	dh.ModpGroup = mg
}

func (dh *DiffieHellman) GenerateIndividualKey() (ik IndividualKey) {
	dh.New()
	privateKey := randomBigInt(dh.ModpGroup.Prime)
	publicKey := dh.quickPowMod(dh.ModpGroup.Generator, privateKey, dh.ModpGroup.Prime, true)

	dh.PrivateKey = privateKey

	ik.PrivateKey = privateKey
	ik.PublicKey = publicKey
	return
}

func ReverseStringArray(s *[]string) {
	j := len(*s) - 1
	for i := 0; i < j; i++ {
		(*s)[i], (*s)[j] = (*s)[j], (*s)[i]
		j--
	}
}

/** Calculates x ** y % p.
 *  Time complexity: O(n^2).
 */
func (dh *DiffieHellman) quickPowMod(x, y, p *big.Int, isCache bool) *big.Int {
	primeBinaryArray := strings.Split(fmt.Sprintf("%b", y), "")
	ReverseStringArray(&primeBinaryArray)
	var xExpTable []*big.Int
	if isCache {
		if expTableCache[dh.Digits] == nil {
			xExpTable = expTable(x, p, len(primeBinaryArray))
		} else {
			xExpTable = expTableCache[dh.Digits]
		}
	} else {
		xExpTable = expTable(x, p, len(primeBinaryArray))
	}

	// result := big.NewInt(1)
	// for i := 0; i < len(primeBinaryArray); i++ {
	// 	if primeBinaryArray[i] == "1" {
	// 		result = result.Mod(result.Mul(result, xExpTable[i]), p)
	// 	}
	// }

	results := [](*big.Int){}
	var wg sync.WaitGroup
	goroutineNum := runtime.NumCPU()
	for k := 0; k < goroutineNum; k++ {
		result := big.NewInt(1)
		wg.Add(1)
		go func(j int, length int) {
			for i := j; i < length; i++ {
				if primeBinaryArray[i] == "1" {
					result = result.Mod(result.Mul(result, xExpTable[i]), p)
				}
			}
			results = append(results, result)
			defer wg.Done()
		}(len(primeBinaryArray)/goroutineNum*k, len(primeBinaryArray)/goroutineNum*(k+1))
	}
	wg.Wait()
	result := big.NewInt(1)
	for _, v := range results {
		result = result.Mod(result.Mul(result, v), p)
	}
	return result
}

/** Calculates x, x ** 2, x ** 4, x ** 8, ... x ** (2 ** (digit-1)) */
func expTable(x, p *big.Int, digit int) []*big.Int {
	result := []*big.Int{x}
	cur := x
	for i := 1; i < digit; i++ {
		t := big.NewInt(0)
		t.Mul(cur, cur)
		m := big.NewInt(0)
		cur = m.Mod(t, p)
		result = append(result, cur)
	}
	return result
}

func getModpGroupInfo(digits int) (mg *ModpGroup, err error) {
	mg = new(ModpGroup)
	if primes[digits] == struct {
		Generator int64
		Prime     string
	}{} {
		err = errors.New("The digits are not supported.")
	}
	mg.Generator = big.NewInt(primes[digits].Generator)
	mg.Prime = new(big.Int)
	var ok bool
	mg.Prime, ok = mg.Prime.SetString(primes[digits].Prime, 10)
	if !ok {
		err = errors.New("Big conversion failed.")
		return
	}
	return
}

func randomBigInt(prime *big.Int) *big.Int {
	// fmt.Println("prime", prime)

	// currentTime := time.Now()
	n, _ := rand.Int(rand.Reader, prime)
	return n
	// fmt.Println("n.Int64()", n)
	// elapsed := time.Since(currentTime)

	// currentTime1 := time.Now()
	// primeBinaryArray := strings.Split(fmt.Sprintf("%b", prime), "")

	// // fmt.Println("binaryArray", primeBinaryArray, len(primeBinaryArray))
	// var randomBinaryArray string = ""
	// // midNum := big.NewInt(5)

	// samePrefix := true
	// for i := 0; i < len(primeBinaryArray); i++ {
	// 	if !samePrefix {
	// 		if mrand.Float64() > 0.5 {
	// 			randomBinaryArray = randomBinaryArray + "1"
	// 		} else {
	// 			randomBinaryArray = randomBinaryArray + "0"
	// 		}
	// 	} else {
	// 		if primeBinaryArray[i] == "0" {
	// 			randomBinaryArray = randomBinaryArray + "0"
	// 		} else {
	// 			r := 1
	// 			k := 30
	// 			if len(primeBinaryArray)-i < 30 {
	// 				k = len(primeBinaryArray) - i
	// 			}
	// 			for j := i; j < i+k; j++ {
	// 				z, _ := strconv.Atoi(primeBinaryArray[j])
	// 				r = (r << 1) | z
	// 			}
	// 			currentDigit := 1
	// 			f := 1 << k
	// 			if mrand.Float64() < float64(f)/float64(r) {
	// 				currentDigit = 0
	// 			}
	// 			z, _ := strconv.Atoi(primeBinaryArray[i])
	// 			samePrefix = currentDigit == z

	// 			randomBinaryArray = randomBinaryArray + strconv.Itoa(currentDigit)
	// 		}
	// 	}
	// }

	// fmt.Println("randomBinaryArray", randomBinaryArray)
	// // fmt.Println("十进制", fmt.Sprintf("%d", randomBinaryArray))

	// elapsed1 := time.Since(currentTime1)
	// fmt.Println("11111该函数执行完成耗时：", elapsed1)
	// randomNum := new(big.Int)
	// return randomNum
}
